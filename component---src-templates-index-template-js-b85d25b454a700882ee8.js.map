{"version":3,"sources":["webpack:///./src/templates/index-template.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_Sidebar__WEBPACK_IMPORTED_MODULE_2__","_components_Feed__WEBPACK_IMPORTED_MODULE_3__","_components_Page__WEBPACK_IMPORTED_MODULE_4__","_components_Pagination__WEBPACK_IMPORTED_MODULE_5__","_hooks__WEBPACK_IMPORTED_MODULE_6__","IndexTemplate","_ref","data","pageContext","_useSiteMetadata","useSiteMetadata","siteTitle","title","siteSubtitle","subtitle","currentPage","hasNextPage","hasPrevPage","prevPagePath","nextPagePath","edges","allMarkdownRemark","pageTitle","a","createElement","description","isIndex","console","log"],"mappings":"2FACAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAwCaI,EAAK,aAoCHU,UA7DO,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,KAAMC,EAAyBF,EAAzBE,YAAyBC,EACDC,cAAtCC,EADuCF,EAC9CG,MAA4BC,EADkBJ,EAC5BK,SAElBC,EAAsEP,EAAtEO,YAAaC,EAAyDR,EAAzDQ,YAAaC,EAA4CT,EAA5CS,YAAaC,EAA+BV,EAA/BU,aAAcC,EAAiBX,EAAjBW,aAErDC,EAAUb,EAAKc,kBAAfD,MACFE,EAAYP,EAAc,EAAd,gBAAkCA,EAAlC,MAAmDJ,EAAcA,EAEnF,OACEd,EAAA0B,EAAAC,cAACzB,EAAA,EAAD,CAAQa,MAAOU,EAAWG,YAAaZ,GACrChB,EAAA0B,EAAAC,cAACxB,EAAA,EAAD,CAAS0B,SAAO,IAChB7B,EAAA0B,EAAAC,cAACtB,EAAA,EAAD,KACGyB,QAAQC,IAAIrB,GACbV,EAAA0B,EAAAC,cAACvB,EAAA,EAAD,CAAMmB,MAAOA,IACbvB,EAAA0B,EAAAC,cAACrB,EAAA,EAAD,CACEe,aAAcA,EACdC,aAAcA,EACdF,YAAaA,EACbD,YAAaA","file":"component---src-templates-index-template-js-b85d25b454a700882ee8.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Sidebar from '../components/Sidebar';\nimport Feed from '../components/Feed';\nimport Page from '../components/Page';\nimport Pagination from '../components/Pagination';\nimport { useSiteMetadata } from '../hooks';\nimport type { PageContext, AllMarkdownRemark } from '../types';\n\ntype Props = {\n  data: AllMarkdownRemark,\n  pageContext: PageContext\n};\n\nconst IndexTemplate = ({ data, pageContext }: Props) => {\n  const { title: siteTitle, subtitle: siteSubtitle } = useSiteMetadata();\n\n  const { currentPage, hasNextPage, hasPrevPage, prevPagePath, nextPagePath } = pageContext;\n\n  const { edges } = data.allMarkdownRemark;\n  const pageTitle = currentPage > 0 ? `Posts - Page ${currentPage} - ${siteTitle}` : siteTitle;\n\n  return (\n    <Layout title={pageTitle} description={siteSubtitle}>\n      <Sidebar isIndex />\n      <Page>\n        {console.log(data)}\n        <Feed edges={edges} />\n        <Pagination\n          prevPagePath={prevPagePath}\n          nextPagePath={nextPagePath}\n          hasPrevPage={hasPrevPage}\n          hasNextPage={hasNextPage}\n        />\n      </Page>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query IndexTemplate($postsLimit: Int!, $postsOffset: Int!) {\n    allMarkdownRemark(\n      limit: $postsLimit\n      skip: $postsOffset\n      filter: { frontmatter: { template: { eq: \"post\" }, draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          frontmatter {\n            number\n            title\n            date\n            category\n            description\n            tags\n            mp3\n            castbox\n            google_podcast\n            spotify\n            castbox_embed\n            anchor\n            cover\n            banner\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexTemplate;\n"],"sourceRoot":""}