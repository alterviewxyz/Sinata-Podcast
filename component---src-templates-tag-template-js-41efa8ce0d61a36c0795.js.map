{"version":3,"sources":["webpack:///./src/templates/tag-template.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_Sidebar__WEBPACK_IMPORTED_MODULE_2__","_components_Feed__WEBPACK_IMPORTED_MODULE_3__","_components_Page__WEBPACK_IMPORTED_MODULE_4__","_components_Pagination__WEBPACK_IMPORTED_MODULE_5__","_hooks__WEBPACK_IMPORTED_MODULE_6__","TagTemplate","_ref","data","pageContext","_useSiteMetadata","useSiteMetadata","siteTitle","title","siteSubtitle","subtitle","tag","currentPage","prevPagePath","nextPagePath","hasPrevPage","hasNextPage","edges","allMarkdownRemark","pageTitle","a","createElement","description"],"mappings":"2FACAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KA8CaI,EAAK,aAgCHU,UA/DK,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,KAAMC,EAAyBF,EAAzBE,YAAyBC,EACCC,cAAtCC,EADqCF,EAC5CG,MAA4BC,EADgBJ,EAC1BK,SAGxBC,EAMEP,EANFO,IACAC,EAKER,EALFQ,YACAC,EAIET,EAJFS,aACAC,EAGEV,EAHFU,aACAC,EAEEX,EAFFW,YACAC,EACEZ,EADFY,YAGMC,EAAUd,EAAKe,kBAAfD,MACFE,EAAYP,EAAc,EAAd,wBAA0CD,EAA1C,YAAyDC,EAAzD,MAA0EL,EAA1E,wBAAgHI,EAAhH,OAA0HJ,EAE5I,OACEd,EAAA2B,EAAAC,cAAC1B,EAAA,EAAD,CAAQa,MAAOW,EAAWG,YAAab,GACrChB,EAAA2B,EAAAC,cAACzB,EAAA,EAAD,MACAH,EAAA2B,EAAAC,cAACvB,EAAA,EAAD,CAAMU,MAAOG,GACXlB,EAAA2B,EAAAC,cAACxB,EAAA,EAAD,CAAMoB,MAAOA,IACbxB,EAAA2B,EAAAC,cAACtB,EAAA,EAAD,CACEc,aAAcA,EACdC,aAAcA,EACdC,YAAaA,EACbC,YAAaA","file":"component---src-templates-tag-template-js-41efa8ce0d61a36c0795.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Sidebar from '../components/Sidebar';\nimport Feed from '../components/Feed';\nimport Page from '../components/Page';\nimport Pagination from '../components/Pagination';\nimport { useSiteMetadata } from '../hooks';\nimport type { AllMarkdownRemark, PageContext } from '../types';\n\ntype Props = {\n  data: AllMarkdownRemark,\n  pageContext: PageContext\n};\n\nconst TagTemplate = ({ data, pageContext }: Props) => {\n  const { title: siteTitle, subtitle: siteSubtitle } = useSiteMetadata();\n\n  const {\n    tag,\n    currentPage,\n    prevPagePath,\n    nextPagePath,\n    hasPrevPage,\n    hasNextPage\n  } = pageContext;\n\n  const { edges } = data.allMarkdownRemark;\n  const pageTitle = currentPage > 0 ? `All Posts tagged as \"${tag}\" - Page ${currentPage} - ${siteTitle}` : `All Posts tagged as \"${tag}\" - ${siteTitle}`;\n\n  return (\n    <Layout title={pageTitle} description={siteSubtitle}>\n      <Sidebar />\n      <Page title={tag}>\n        <Feed edges={edges} />\n        <Pagination\n          prevPagePath={prevPagePath}\n          nextPagePath={nextPagePath}\n          hasPrevPage={hasPrevPage}\n          hasNextPage={hasNextPage}\n        />\n      </Page>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query TagPage($tag: String, $postsLimit: Int!, $postsOffset: Int!) {\n    site {\n      siteMetadata {\n        title\n        subtitle\n      }\n    }\n    allMarkdownRemark(\n        limit: $postsLimit,\n        skip: $postsOffset,\n        filter: { frontmatter: { tags: { in: [$tag] }, template: { eq: \"post\" }, draft: { ne: true } } },\n        sort: { order: DESC, fields: [frontmatter___date] }\n      ){\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          frontmatter {\n            title\n            date\n            category\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagTemplate;\n"],"sourceRoot":""}